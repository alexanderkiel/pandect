(ns pandect.gen.hmac-generator
  (:require [pandect.gen.core :refer :all])
  (:import [java.io File FileInputStream InputStream]))

;; ## Coercion

(defprotocol ByteArrayConvertable
  "Protocol for Entities that can be converted to byte arrays."
  (convert-to-byte-array [this]))

(extend-protocol ByteArrayConvertable
  (class (byte-array 0))
  (convert-to-byte-array [this] this)
  String
  (convert-to-byte-array [this] (.getBytes this))
  java.io.File
  (convert-to-byte-array [this]
    (.getBytes ^String (slurp this)))
  java.io.InputStream
  (convert-to-byte-array [this]
    (.getBytes ^String (slurp this))))

;; ## Generation

(defprotocol HMACGen
  (bytes->hmac [this msg-form key-form]
    "Generate code to convert the byte array produced by the given `msg-form`
     to a value representing the hash-based message authentication code using the given
     `key-form` (a byte array).")
  (stream->hmac [this stream-form key-form]
    "Generate code to convert the input stream produced by the given `stream-form`
     to a value representing the hash-based message authentication code using the given
     `key-form` (a byte array).")
  (hmac->string [this form]
    "Generate code to convert the HMAC value produced by the given form to
     a hex string.")
  (hmac->bytes [this form]
    "Generate code to convert the HMAC value produced by the given form to
     a byte array."))

(def hmac-generator
  "Generates function representing a HMAC algorithm:

   - `X-hmac` : outputs hex string
   - `X-hmac-bytes` : outputs byte array
   - `X-hmac-file` : input is path to file, outputs string
   - `X-hmac-file-bytes` : input is path to file, outputs byte array
   - `X-hmac*` : outputs the actual HMAC value generated by the given function
   - `X-hmac-file*` : input is path to file, outputs the actual HMAC value generated by the given function

   "
  (reify Generator
    (can-generate? [_ code-gen]
      (satisfies? HMACGen code-gen))
    (generate-protocol [_ code-gen id]
      (let [f (vary-meta id assoc :private true)
            sym (gensym "data")
            k (gensym "key")
            P (with-meta (gensym) {:private true})]
        `(do
           (defprotocol ~P
             (~f [this# key#]))
           (extend-protocol ~P
             (class (byte-array 0))
             (~f [~sym ~k] ~(bytes->hmac code-gen sym k))
             String
             (~f [~sym ~k] ~(bytes->hmac code-gen `(.getBytes ~sym) k))
             InputStream
             (~f [~sym ~k] ~(stream->hmac code-gen sym k))
             File
             (~f [~sym ~k]
               ~(wrap-file-stream (stream->hmac code-gen sym k) sym))))))
    (generate-functions [_ code-gen id f]
      (let [f (symbol+ f :hmac)
            f-bytes (symbol+ f :bytes)
            f-file  (symbol+ f :file)
            f-file-bytes (symbol+ f :file-bytes)
            f-raw (symbol* f)
            f-raw-file (symbol+ f :file*)
            sym (gensym "data")
            fsym (vary-meta sym assoc :tag `String)
            k (gensym "key")
            call `(~id ~sym (convert-to-byte-array ~k))
            call-file (wrap-file-stream call sym fsym)]
        (vector
          `(defn ~f-raw [~sym ~k] ~call)
          `(defn ~f-raw-file [~sym ~k] ~call-file)
          `(defn ~f-file-bytes [~sym ~k] ~(hmac->bytes code-gen call-file))
          `(defn ~f-file [~sym ~k] ~(hmac->string code-gen call-file))
          `(defn ~f-bytes [~sym ~k] ~(hmac->bytes code-gen call))
          `(defn ~f [~sym ~k] ~(hmac->string code-gen call)))))))
