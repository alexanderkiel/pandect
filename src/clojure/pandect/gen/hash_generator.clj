(ns pandect.gen.hash-generator
  (:require [pandect.gen.core :refer :all])
  (:import [java.io File FileInputStream InputStream]))

(defprotocol HashGen
  (bytes->hash [this form]
    "Generate code to convert the byte array produced by the given form to
     a value representing the given hash.")
  (stream->hash [this form buffer-size]
    "Generate code to convert the input stream produced by the given form
     to a value representing the given hash.")
  (hash->string [this form]
    "Generate code to convert the hash value produced by the given form to
     a hex string.")
  (hash->bytes [this form]
    "Generate code to convert the hash value produced by the given form to
     a byte array."))

(def hash-generator
  "Generates function representing a Hash algorithm:

   - `X` : outputs hex string
   - `X-bytes` : outputs byte array
   - `X-file` : input is path to file, outputs string
   - `X-file-bytes` : input is path to file, outputs byte array
   - `X*` : outputs the actual hash value generated by the given function
   - `X-file*` : input is path to file, outputs the actual hash value generated by the given function

   "
  (reify Generator
    (can-generate? [_ code-gen]
      (satisfies? HashGen code-gen))
    (generate-protocol [_ code-gen id buffer-size]
      (let [f (vary-meta id assoc :private true)
            sym (gensym "data")
            P (with-meta (gensym) {:private true})
            stream-form (stream->hash code-gen sym buffer-size)]
        `(do
           (defprotocol ~P
             (~f [this#]))
           (extend-protocol ~P
             (class (byte-array 0))
             (~f [~sym] ~(bytes->hash code-gen sym))
             String
             (~f [~sym] ~(bytes->hash code-gen `(.getBytes ~sym)))
             InputStream
             (~f [~sym] ~stream-form)
             File
             (~f [~sym]
               ~(wrap-file-stream stream-form sym))))))
    (generate-functions [_ code-gen id f]
      (let [sym 'x
            algorithm (algorithm-string code-gen)
            fsym (vary-meta sym assoc :tag `String)
            mk (fn [suffix docstring call]
                 `(defn ~(symbol+ f suffix)
                    ~(format "[Hash] %s (%s)" algorithm docstring)
                    [~sym]
                    ~call))
            call `(~id ~sym)
            call-file (wrap-file-stream call sym fsym)]
        (->> [[:*          "raw value"                 call]
              [:file*      "file path -> raw value"  call-file]
              [:file-bytes "file path -> byte array" (hash->bytes code-gen call-file)]
              [:file       "file path -> string"     (hash->string code-gen call-file)]
              [:bytes      "value -> byte array"     (hash->bytes code-gen call)]
              [nil         "value -> string"         (hash->string code-gen call)]]
             (mapv #(apply mk %)))))))
